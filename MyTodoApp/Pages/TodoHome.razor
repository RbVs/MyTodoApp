@page "/todo-home"
@inject IRepository<TodoList> TodoListRepository

<div class="row">
    <div class="col-md-3">
        <p>My lists</p>

        <AddNewList ListAdded="@RefreshList"></AddNewList>

        @if (TodoLists == null)
        {
            <p>Loading...</p>
        }
        else
        {
            <SfListView DataSource="@TodoLists" CssClass="sflist" ID="todolistView">
                <ListViewFieldSettings TValue="TodoList" Id="Ident" Text="Name"></ListViewFieldSettings>
                <ListViewEvents TValue="TodoList" Clicked="@(e => SetSelectedItem(e))"> </ListViewEvents>
            </SfListView>
            <SfContextMenu Target="#todolistView" Items="@MenuItems">
            </SfContextMenu>
        }
    </div>
    <div class="col-md-7">
        <p>My todos</p>
        <SfButton IsPrimary="true" @onclick="DeleteList">Delete selected List</SfButton>
    </div>
    <div class="col-md-2">
        <p>maybe some options</p>
    </div>
</div>


@code{
    private List<TodoList> TodoLists { get; set; }
    
    public List<MenuItem> MenuItems = new List<MenuItem>
    {
        new MenuItem{ Text = "Edit",  },
        new MenuItem{ Separator = true},
        new MenuItem{ Text = "Delete" },
    };
    protected override Task OnInitializedAsync()
    {
        TodoLists = TodoListRepository.GetAll();
        return base.OnInitializedAsync();
    }

    void RefreshList(bool refresh)
    {
        if (!refresh) return;

        TodoLists = TodoListRepository.GetAll();
    }

    private async Task DeleteList()
    {
        if(SelectedList == null) return;
        
        var deleted = TodoListRepository.Delete(SelectedList);
        RefreshList(deleted);
    }

    private TodoList SelectedList { get; set; }

    private void SetSelectedItem(ClickEventArgs<TodoList> selectedList )
    {
        SelectedList = selectedList.ItemData;
    }
}

<style>
    .sflist{
    margin: 10px 0px    
    }
</style>